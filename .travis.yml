language: go

# Only the last two Go releases are supported by the Go team with security
# updates. Any versions older than that should be considered deprecated.
# Don't bother testing with them. tip builds your code with the latest
# development version of Go. This can warn you that your code will break
# in the next version of Go. Don't worry! Later we declare that test runs
# are allowed to fail on Go tip.
go:
  - 1.9
  - master 

# Skip the install step. Don't `go get` dependencies. Only build with the
# code in vendor/
install: true

sudo: required
services:
  - docker
matrix:
  # It's ok if our code fails on unstable development versions of Go.
  allow_failures:
    - go: master
  # Don't wait for tip tests to finish. Mark the test run green if the
  # tests pass on the stable versions of Go.
  fast_finish: true

# Don't email me the results of the test runs.
notifications:
  email: false

# Anything in before_script that returns a nonzero exit code will
# flunk the build and immediately stop. It's sorta like having
# set -e enabled in bash. 
before_script:
- GO_FILES=$(find . -iname '*.go' -type f | grep -v /vendor/ )
- GOPATH=$HOME/go
-  mkdir -p $HOME/go/src/github.com/play-with-docker 
-  cd $HOME/go/src/github.com/play-with-docker
-  git clone https://github.com/introproventures/play-with-docker.git
-  cd play-with-docker
-  go get -u github.com/golang/dep/cmd/dep
-  $HOME/go/bin/dep ensure
- sudo docker swarm init 
- sudo modprobe xt_ipvs
- sudo docker pull  introproventures/dind
# script always run to completion (set +e). All of these code checks are must haves
# in a modern Go project.
script:
 # - test -z $(gofmt -s -l $GO_FILES)         # Fail if a .go file hasn't been formatted with gofmt
 - docker-compose up -d 
 - sleep 120
 - nc -z localhost 80
 - docker ps 
 - docker-compose down
 
after_success:
  - if [ "$TRAVIS_BRANCH" == "master" ]; then echo "have to push repo or do deployment in case of master branch" fi
